section
  section
    h2 Puppeteer y Cucumber
    div.center-center
      img(src="./assets/puppeteer-logo.png", alt="Puppeteer").clean-img.height10
      .width5
      img(src="./assets/cucumber-logo.png", alt="Cucumber").clean-img.height10
    div
      img(src="./assets/cucumber-y-puppeteer.gif", alt="Cucumber y Puppeteer").clean-img.height20

  section
    h3 ¿Qué son Tests E2E?
    img(src="./assets/puppeteer-execution.gif").height35

  section
    img(src="./assets/tests-e2e-mal.png", alt="Cucumber").clean-img.height50

  section
    h3 Ejemplo funcional en Gitlab
    a(href="http://bit.ly/jsday2018-pptr-e2e").inline bit.ly/jsday2018-pptr-e2e

  section
    h3 Organizando el proyecto
    img(src="./assets/cucumber-puppeteer-estructura.png", alt="Estructura de directorio con Cucumber y Puppeteer").cleamn-img.height35

  section
    h3 ¿Dónde incializamos Puppeteer?
    img(src="./assets/cucumber-puppeteer-world.png", alt="Fichero steps").clean-img.height35

  section
    h3 ¿Dónde incializamos Puppeteer?
    h3 En "El Mundo"
    pre
      code.
        class CustomWorld {
          _browser = scope.browser
          _page = null

          async getPage () {
            if (!this._page) {
              this._page = await this._browser.newPage();
            }
            return this._page
          }

          async closePage () {
            if (this._page) {
              await this._page.close()
              this._page = null
            }
          }
        }

  section
    h3 Dónde están los steps?
    img(src="./assets/cucumber-puppeteer-steps.png", alt="Fichero steps").clean-img.height35

  section
    h3 Un paso una función
    pre
      code.javascript.
        Given('I am at the {word} page', navigateTo)
        When('I enter my username {string} and my password {string}', enterUsernameAndPassword)
        Then('I see the {string} page', currentPageIs);

  section
    h3 Acciones y Aserciones
    img(src="./assets/cucumber-puppeteer-actions-assertions.png", alt="Fichero steps").clean-img.height35
    ul
      li Acciones: Navegar a una página, hacer click en un botón, rellenar un formulario
      li Aserciones: Veo la página de login, veo 4 tarjetas

  section
    h3 Hacer click en algún sitio
    pre
      code.javascript.
        async function clickElement (ctx, selectorScope, elementKey) {
          const selector = getSelector(selectorScope, elementKey)

          const page = await ctx.getPage()
          await page.click(selector)
        }
        // steps.js
        Then('I click the {string}', (ctx, elementKey) => clickElement(ctx, selectors.header.rightMenu, elementKey))

  section
    h3 Hacer click en algún sitio
    pre
      code.javascript.
        function clickElement (selectorScope) {
          return async function (ctx, elementKey) {
            const selector = getSelector(selectorScope, elementKey)

            const page = await ctx.getPage()
            await page.click(selector)
          }
        }

        const clickElementAtHeaderRightMenu = clickElement(selectors.header.rightMenu)
        // steps.js
        Then('I click the "Login Button"', clickElementAtHeaderRightMenu)

  section
    h3 Hacer click en algún sitio
    pre
      code.javascript.
        const clickElement = selectorScope => async (ctx, elementKey) => {
          const selector = getSelector(selectorScope, elementKey)

          const page = await ctx.getPage()
          await page.click(selector)
        }
        const clickElementAtHeaderRightMenu = clickElement(selectors.header.rightMenu)
        // steps.js
        Then('I click the "Login Button"', clickElementAtHeaderRightMenu)

  section
    h3 Combinar varios pasos en uno solo
    pre
      code.javascript.
        const typeUsernameAtLogin = typeAt(selectors.login.usernameInput)
        const typePasswordAtLogin = typeAt(selectors.login.passwordInput)

        export const enterUsernameAndPassword = joinSteps(
          typeUsernameAtLogin,
          typePasswordAtLogin
        )
        // steps.js
        When('I enter my username {string} and my password {string}', enterUsernameAndPassword)

  section
    h3 Combinar varios pasos en uno solo
    pre
      code.gherkin.
        Scenario: User logs in and sees its profile
          Given I am at the home page
          When I click in "Login" at the header
          And I enter my username "testuser123999" and my password "foobar123"
          And I press the "submit" button at the form
          Then I see the "Profile" page
          And I save a screenshot at "profile-new-user.png"

  section
    h3 Combinar varios pasos en uno solo
    pre
      code.gherkin.
          Scenario: Reach the Add New Movie page
            Given the user has logged in
            # (...)

  section
    h3 Combinar varios pasos en uno solo
    pre
      code.javascript.
        Given('the user has logged in', withLoggedUser)

        async function withLoggedUser (ctx) {
          await navigateTo(ctx, 'login'),
          await enterUsernameAndPassword(ctx, 'testuser123999', 'foobar123')
          await pressSubmit(ctx, 'submit')
          await sleep(ctx, 1)
        }

  section
    h3 Accedemos al mundo a través del this
    pre
      code.javascript.
        Then('I save a screenshot at {string}', async function(page) {
          console.log(this.page) // Ok!
        })

    pre
      code.javascript.
        Then('I save a screenshot at {string}', async (page) => {
          console.log(this.page) // Error!
        })


  section
    h3 No hay soporte para distribución de argumentos
    pre
      code.javascript.
        Then('I save a screenshot at {string}', async function(...args) {
          console.log(args)
        })
    pre
      code.
        × And I save a screenshot at "profile-new-user.png" # features\support\steps.js:21
            function has 0 arguments, should have 1 (if synchronous or returning a promise) or 2 (if accepting a callback)

  section
    h3 Arreglando la pérdida this y la longitud de argumentos
    pre
      code.javascript.
        export const bind0 = fn => function () {
          return fn(this)
        }

        export const bind1 = fn => function (arg1) {
          return fn(this, arg1)
        }

        export const bind2 = fn => function (arg1, arg2) {
          return fn(this, arg1, arg2)
        }

        export const bind3 = fn => function (arg1, arg2, arg3) {
          return fn(this, arg1, arg2, arg3)
        }

  section
    h3 Arreglando la pérdida this y la longitud de argumentos
    pre
      code.
        Given('I am at the {word} page', bind1(navigateTo))

        export async function navigateTo(ctx, pageKey) {
          const page = await ctx.getPage()
          await page.goto(getUrl(navigation, pageKey))
        }

  section
    h3 Creando selectores fáciles de tracear
    img(src="assets/traceable-selectors.png", alt="Flecha señalando al login en la cabecera")
    pre
      code.
        page.click(selectors.header.rightMenu.Login)

  section
    h3 Creando selectores fáciles de tracear
    pre
      code.
        export const selectors = {
          title: 'title',
          header: nestedSelector('header', {
            rightMenu: nestedSelector('.right .primary', {
              'plus icon': nestedSelector('li:first-child > div', {
                'Add New Movie': 'a[href="/movie/new"]'
              }),
              Login: 'a[href="/login"]',
              'Sign Up': 'a[href="/account/signup"]',
            })
          }),
          login: {
            usernameInput: '#username',
            passwordInput: '#password'
          },
          movieDetails: {
            topBilled: nestedSelector('section.top_billed', {
              eachActor: nestedSelector('.card', {
                actorName: 'p a',
                characterName: '.character',
              })
            }),
            eachGenre: 'section.genres li'
          },
          commonElements: {
            submit: `main input[type="submit"]`
          }
        };

  section
    h3 Creando selectores fáciles de tracear
    pre
      code.
        console.log(selectors.header.rightMenu.Login)
        // 'header .right .primary a[href="/login"]'

  section
    h3 Evitar seleccionar por elementos del DOM / clases
    pre.fragment
      code.jsx.
        const MyButton = () => (
          <div data-test-id="super-boton">
            <button>Soy un Botón</button>
          </div>
        )
    a(href="https://www.npmjs.com/package/babel-plugin-jsx-remove-data-test-id").inline.fragment babel-plugin-jsx-remove-data-test-id

  section
    h3 Ventajas con Puppeteer

  section
    h3 Ventajas con Puppeteer
    h4 Coverage out of the Box
    pre
      code.
        // getPage
        await Promise.all([
          this._page.coverage.startJSCoverage(),
          this._page.coverage.startCSSCoverage()
        ]);

        // closePage
        const [jsCoverage, cssCoverage] = await Promise.all([
          this._page.coverage.stopJSCoverage(),
          this._page.coverage.stopCSSCoverage(),
        ]);
        pti.write(jsCoverage)

  section
    h3 Ventajas con Puppeteer
    h4 Coverage out of the Box
    img(src="assets/coverage.png", alt="Captura del cubrimiento de la página web")

  section
    h3 Ventajas con Puppeteer
    h4 Obtener perfil de rendimiento
    img(src="assets/preformance-profile.png", alt="Cargar perfil de rendimiento")

  section
    h3 Ventajas con Puppeteer
    h4 Obtener perfil de rendimiento
    pre
      code.gherkin.
        Scenario: # ...
          Given I start tracing
          # ...
          Then I stop tracing


  section
    h3 Ventajas con Puppeteer
    h4 Interceptar peticiones de red
    pre
      code.javascript.
        await page.setRequestInterception(true);
        page.on('request', interceptedRequest => {
          if (interceptedRequest.url().endsWith('analytics.js')) {
            interceptedRequest.abort()
          } else{
            interceptedRequest.continue()
          }
        })
  section
    h3 Ventajas con Puppeteer
    h3 Depuración
    pre
      code.gherkin.
        Then I place a breakpoint in "funcionesB4.js" at line number 97

    a(href="http://bit.ly/jsday2018-pptr-breakpoint").inline bit.ly/jsday2018-pptr-breakpoint
